{"version":3,"sources":["fonts/IndieFlower-Regular.ttf","Card.js","CardList.js","SearchBox.js","Persona.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","id","name","email","className","alt","src","width","height","CardList","personas","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","username","App","onSearchChange","event","setState","target","value","state","filteredPersonas","this","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mIAAAA,EAAOC,QAAU,IAA0B,iD,qHCc5BC,EAZF,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,GAAIC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,MACrB,OACI,yBAAKC,UAAU,+DACX,yBAAKC,IAAK,QAAQC,IAAG,+BAA2BL,GAAMM,MAAM,MAAMC,OAAO,QACzE,6BACI,4BAAKN,GACL,2BAAIC,MCaLM,EAlBE,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACf,OACI,6BAEQA,EAASC,KAAI,SAACC,EAAMC,GAChB,OAAQ,kBAAC,EAAD,CACJC,IAAKD,EACLZ,GAAIS,EAASG,GAAGZ,GAChBC,KAAMQ,EAASG,GAAGX,KAClBC,MAAOO,EAASG,GAAGV,aCG5BY,EAbG,SAAC,GAA+B,EAA9BC,YAA+B,IAAnBC,EAAkB,EAAlBA,aAC5B,OACI,yBAAKb,UAAU,OACV,2BACGA,UAAW,mCACXc,KAAK,SACLC,YAAY,kBACZC,SAAUH,MCTbP,EAAW,CACpB,CACIT,GAAI,EACJC,KAAM,SACNmB,SAAU,WACVlB,MAAO,wBAEX,CACIF,GAAI,EACJC,KAAM,QACNmB,SAAU,MACVlB,MAAO,uBAEX,CACIF,GAAI,EACJC,KAAM,aACNmB,SAAU,aACVlB,MAAO,uBAEX,CACIF,GAAI,EACJC,KAAM,YACNmB,SAAU,SACVlB,MAAO,2BAEX,CACIF,GAAI,EACJC,KAAM,QACNmB,SAAU,UACVlB,MAAO,wBAEX,CACIF,GAAI,EACJC,KAAM,YACNmB,SAAU,SACVlB,MAAO,wBAEX,CACIF,GAAI,EACJC,KAAM,SACNmB,SAAU,YACVlB,MAAO,sBAEX,CACIF,GAAI,EACJC,KAAM,SACNmB,SAAU,UACVlB,MAAO,yBAEX,CACIF,GAAI,EACJC,KAAM,aACNmB,SAAU,SACVlB,MAAO,yBAEX,CACIF,GAAI,GACJC,KAAM,YACNmB,SAAU,SACVlB,MAAO,wBAEX,CACIF,GAAI,GACJC,KAAM,SACNmB,SAAU,gBACVlB,MAAO,wBAEX,CACIF,GAAI,GACJC,KAAM,QACNmB,SAAU,WACVlB,MAAO,uBCvCAmB,E,kDA1BX,aAAe,IAAD,8BACV,gBAOJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAACT,YAAaQ,EAAME,OAAOC,SAPzC,EAAKC,MAAQ,CACTlB,SAAUA,EACVM,YAAY,IAJN,E,qDAYL,IAAD,OACEa,EAAmBC,KAAKF,MAAMlB,SAASqB,QAAO,SAAArB,GAChD,OAAOA,EAASR,KAAK8B,cAAcC,SAAS,EAAKL,MAAMZ,YAAYgB,kBAEvE,OACI,yBAAK5B,UAAU,MACX,wCACA,kBAAC,EAAD,CAAWa,aAAca,KAAKP,iBAC9B,kBAAC,EAAD,CAAUb,SAAYmB,S,GArBpBK,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.0e1af587.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/IndieFlower-Regular.0841af95.ttf\";","import React from 'react';\r\n\r\nconst Card = ({id, name, email}) =>{\r\n    return(\r\n        <div className='tc mw=10 bg-washed-yellow dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt= 'Robot' src= {`https://robohash.org/${id}`} width=\"200\" height=\"200\"></img>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card.js';\r\n\r\nconst CardList = ({personas}) => {\r\n    return(\r\n        <div>\r\n            {\r\n                personas.map((user, i) => {\r\n                    return (<Card \r\n                        key={i}\r\n                        id={personas[i].id} \r\n                        name={personas[i].name} \r\n                        email={personas[i].email} \r\n                        />\r\n                    )\r\n                })\r\n            } \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield,searchChange}) => {\r\n    return(\r\n        <div className='pa2'>\r\n             <input \r\n                className= 'pa3 ba b--green bg-lightest-blue'\r\n                type='search' \r\n                placeholder='search personas' \r\n                onChange={searchChange}\r\n             />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","export const personas = [\r\n    {\r\n        id: 1,\r\n        name: 'Carrot',\r\n        username: 'Carrot_m',\r\n        email: 'carrot@mywebsite.com'\r\n    },\r\n    {\r\n        id: 2,\r\n        name: 'Honey',\r\n        username: 'hnm',\r\n        email: 'hnm@mymywebsite.com'\r\n    },\r\n    {\r\n        id: 3,\r\n        name: 'Strawberry',\r\n        username: 'berrymerry',\r\n        email: 'berry@mywebsite.com'\r\n    },\r\n    {\r\n        id: 4,\r\n        name: 'Cheescake',\r\n        username: 'Cheese',\r\n        email: 'cheescake@mywebsite.com'\r\n    },\r\n    {\r\n        id: 5,\r\n        name: 'Pasta',\r\n        username: 'Alfredo',\r\n        email: 'apasta@mywebsite.com'\r\n    },\r\n    {\r\n        id: 6,\r\n        name: 'Pineapple',\r\n        username: 'Panini',\r\n        email: 'panini@mywebsite.com'\r\n    },\r\n    {\r\n        id: 7,\r\n        name: 'Coffee',\r\n        username: 'Coffeecup',\r\n        email: 'ccup@mywebsite.com'\r\n    },\r\n    {\r\n        id: 8,\r\n        name: 'Banana',\r\n        username: 'Yellowb',\r\n        email: 'ybanana@mywebsite.com'\r\n    },\r\n    {\r\n        id: 9,\r\n        name: 'Watermelon',\r\n        username: 'wmelon',\r\n        email: 'wmelony@mywebsite.com'\r\n    },\r\n    {\r\n        id: 10,\r\n        name: 'Ice Cream',\r\n        username: 'Icyciy',\r\n        email: 'iceice@mywebsite.com'\r\n    },\r\n    {\r\n        id: 11,\r\n        name: 'tomato',\r\n        username: 'choppedtomato',\r\n        email: 'tomato@mywebsite.com'\r\n    },\r\n    {\r\n        id: 12,\r\n        name: 'Bread',\r\n        username: 'eggbread',\r\n        email: 'eggb@mywebsite.com'\r\n    }\r\n\r\n]","import React, {Component} from 'react';\r\nimport CardList from './CardList';\r\nimport SearchBox from './SearchBox';\r\nimport {personas} from './Persona.js';\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            personas: personas,\r\n            searchfield:''\r\n        }\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({searchfield: event.target.value})\r\n    }\r\n\r\n    render(){\r\n        const filteredPersonas = this.state.personas.filter(personas => {\r\n            return personas.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n        })\r\n        return(\r\n            <div className='tc'>\r\n                <h1>Personas</h1>\r\n                <SearchBox searchChange={this.onSearchChange}/>\r\n                <CardList personas = {filteredPersonas} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './fonts/IndieFlower-Regular.ttf';\nimport App from './App.js';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}